{"version":3,"file":"index.es2.js","sources":["../src/components/MakeApi.tsx"],"sourcesContent":["import {Form, FormControl, FormField, FormItem, FormMessage} from './Form'\nimport {Input} from './Input'\nimport {useForm} from 'react-hook-form'\nimport {z} from 'zod'\nimport {zodResolver} from '@hookform/resolvers/zod'\nimport {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from \"./Select\";\nimport {Tabs, TabsContent, TabsList, TabsTrigger} from \"./Tabs\";\nimport {Params} from \"./Params\";\nimport {Body} from \"./Body\";\nimport {ResponseData} from \"./ResponseData\";\nimport {IMakeApiProps} from \"../types/api.interface\";\nimport {Button} from \"./Button\";\nimport {ListHeaderCommon} from \"../constants/ListMethod\";\nimport {defaultHeader} from \"../constants\";\nimport {Headers} from \"./Headers\";\nimport {useEffect, useState} from \"react\";\nimport axios, {AxiosResponse} from \"axios\";\n\nconst formSchema = z.object({\n  method: z\n    .string(),\n  url: z\n    .string()\n    .url({message: 'Your url is invalid'}),\n\n  params: z.array(z.object({\n    key: z.string(),\n    value: z.string()\n  }), {message: 'Params not valid'}).optional(),\n  headers: z.array(z.object({\n    key: z.string(),\n    value: z.string()\n  })).optional(),\n  body: z.any().optional()\n})\n\nconst MakeApi = (props: IMakeApiProps) => {\n  const [resp, setResp] = useState<AxiosResponse | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const {control, register, ...form} = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      url: '',\n      method: 'get',\n      headers: defaultHeader,\n      body: null\n    },\n  })\n\n  async function onSubmit(data: z.infer<typeof formSchema>) {\n    setLoading(true)\n    const resp = await axios({\n      method: data.method,\n      url: data.url,\n      params: data.params?.reduce((rlt, val) => ({\n        ...rlt,\n        [val.key]: val.value,\n      }), {}),\n      data: data.body,\n      headers: data.headers?.reduce((rlt, val) => ({\n        ...rlt,\n        [val.key]: val.value,\n      }), {}),\n    })\n\n    setLoading(false)\n    setResp(resp)\n  }\n\n  useEffect(() => {\n    if (props) {\n      form.reset({\n        method: props.method,\n        url: props.url,\n        params: props.params,\n        body: props.defaultBody,\n        headers: props.defaultHeaders,\n      })\n\n      if (props.defaultHeaders == null && props.useDefaultHeader !== false) {\n        form.setValue('headers', defaultHeader)\n      }\n    }\n  }, [props])\n\n  return (\n    <div>\n      <Form {...form} control={control} register={register}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className={'flex flex-col space-y-2'}>\n          <div className=\"flex space-x-0 sm:space-x-1\">\n            <FormField\n              control={control}\n              name=\"method\"\n              render={({field}) => (\n                <FormItem className={`w-[120px] mr-3`}>\n                  {/*<FormLabel>Email</FormLabel>*/}\n                  <FormControl>\n                    <Select value={field.value} onValueChange={field.onChange}>\n                      <SelectTrigger className=''>\n                        <SelectValue placeholder='method'>{field.value?.toUpperCase()}</SelectValue>\n                      </SelectTrigger>\n                      <SelectContent>\n                        {ListHeaderCommon.map(e => (\n                          <SelectItem value={e} key={e}>\n                            <div className='flex gap-x-4 px-2 py-1'>{e.toUpperCase()}</div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage/>\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={control}\n              name=\"url\"\n              render={({field}) => (\n                <FormItem className={`flex-1 w-full`}>\n                  {/*<FormLabel>Email</FormLabel>*/}\n                  <FormControl>\n                    <Input placeholder=\"Enter URL\" {...field} />\n                  </FormControl>\n                  <FormMessage className={'!mt-0'}/>\n                </FormItem>\n              )}\n            />\n          </div>\n          <Tabs defaultValue={'params'} className={'flex flex-col space-y-1'}>\n            <TabsList className={''}>\n              <TabsTrigger value='params' className={'flex-1'}>Params</TabsTrigger>\n              <TabsTrigger value='headers' className={'flex-1'}>Headers</TabsTrigger>\n              <TabsTrigger value='body' className={'flex-1'}>Body</TabsTrigger>\n            </TabsList>\n            <TabsContent value='params' className='space-y-4'>\n              <Params control={control} register={register}/>\n            </TabsContent>\n            <TabsContent value='headers' className='space-y-4'>\n              <Headers control={control} register={register}/>\n            </TabsContent>\n            <TabsContent value='body' className='space-y-4'>\n              <FormField\n                control={control}\n                name=\"body\"\n                render={({field}) => (\n                  <FormItem className={`flex-1 w-full`}>\n                    {/*<FormLabel>Email</FormLabel>*/}\n                    <FormControl>\n                      <Body value={field.value} theme={props.theme} onChange={(val) => field.onChange(val)}/>\n                    </FormControl>\n                    <FormMessage className={'!mt-0'}/>\n                  </FormItem>\n                )}\n              />\n            </TabsContent>\n          </Tabs>\n          <Button disabled={loading}>\n            Send\n          </Button>\n        </form>\n      </Form>\n      <ResponseData data={resp} theme={props.theme}/>\n    </div>\n  )\n}\n\nexport {MakeApi}"],"names":["formSchema","z","MakeApi","props","resp","setResp","useState","loading","setLoading","control","register","form","useForm","zodResolver","defaultHeader","onSubmit","data","axios","rlt","val","useEffect","React","Form","FormField","field","FormItem","FormControl","Select","SelectTrigger","SelectValue","SelectContent","ListHeaderCommon","e","SelectItem","FormMessage","Input","Tabs","TabsList","TabsTrigger","TabsContent","Params","Headers","Body","Button","ResponseData"],"mappings":"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"}
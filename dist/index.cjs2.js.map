{"version":3,"file":"index.cjs2.js","sources":["../src/components/MakeApi.tsx"],"sourcesContent":["import {Form, FormControl, FormField, FormItem, FormMessage} from './Form'\nimport {Input} from './Input'\nimport {useForm} from 'react-hook-form'\nimport {z} from 'zod'\nimport {zodResolver} from '@hookform/resolvers/zod'\nimport {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from \"./Select\";\nimport {Tabs, TabsContent, TabsList, TabsTrigger} from \"./Tabs\";\nimport {Params} from \"./Params\";\nimport {Body} from \"./Body\";\nimport {ResponseData} from \"./ResponseData\";\nimport {IMakeApiProps} from \"../types/api.interface\";\nimport {Button} from \"./Button\";\nimport {ListHeaderCommon} from \"../constants/ListMethod\";\nimport {defaultHeader} from \"../constants\";\nimport {Headers} from \"./Headers\";\nimport {useEffect, useState} from \"react\";\nimport axios, {AxiosResponse} from \"axios\";\n\nconst formSchema = z.object({\n  method: z\n    .string(),\n  url: z\n    .string()\n    .url({message: 'Your url is invalid'}),\n\n  params: z.array(z.object({\n    key: z.string(),\n    value: z.string()\n  }), {message: 'Params not valid'}).optional(),\n  headers: z.array(z.object({\n    key: z.string(),\n    value: z.string()\n  })).optional(),\n  body: z.any().optional()\n})\n\nconst MakeApi = (props: IMakeApiProps) => {\n  const [resp, setResp] = useState<AxiosResponse | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const {control, register, ...form} = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      url: '',\n      method: 'get',\n      headers: defaultHeader,\n      body: null\n    },\n  })\n\n  async function onSubmit(data: z.infer<typeof formSchema>) {\n    setLoading(true)\n    const resp = await axios({\n      method: data.method,\n      url: data.url,\n      params: data.params?.reduce((rlt, val) => ({\n        ...rlt,\n        [val.key]: val.value,\n      }), {}),\n      data: data.body,\n      headers: data.headers?.reduce((rlt, val) => ({\n        ...rlt,\n        [val.key]: val.value,\n      }), {}),\n    })\n\n    setLoading(false)\n    setResp(resp)\n  }\n\n  useEffect(() => {\n    if (props) {\n      form.reset({\n        method: props.method,\n        url: props.url,\n        params: props.params,\n        body: props.defaultBody,\n        headers: props.defaultHeaders,\n      })\n\n      if (props.defaultHeaders == null && props.useDefaultHeader !== false) {\n        form.setValue('headers', defaultHeader)\n      }\n    }\n  }, [props])\n\n  return (\n    <div>\n      <Form {...form} control={control} register={register}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className={'flex flex-col space-y-2'}>\n          <div className=\"flex space-x-0 sm:space-x-1\">\n            <FormField\n              control={control}\n              name=\"method\"\n              render={({field}) => (\n                <FormItem className={`w-[120px] mr-3`}>\n                  {/*<FormLabel>Email</FormLabel>*/}\n                  <FormControl>\n                    <Select value={field.value} onValueChange={field.onChange}>\n                      <SelectTrigger className=''>\n                        <SelectValue placeholder='method'>{field.value?.toUpperCase()}</SelectValue>\n                      </SelectTrigger>\n                      <SelectContent>\n                        {ListHeaderCommon.map(e => (\n                          <SelectItem value={e} key={e}>\n                            <div className='flex gap-x-4 px-2 py-1'>{e.toUpperCase()}</div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage/>\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={control}\n              name=\"url\"\n              render={({field}) => (\n                <FormItem className={`flex-1 w-full`}>\n                  {/*<FormLabel>Email</FormLabel>*/}\n                  <FormControl>\n                    <Input placeholder=\"Enter URL\" {...field} />\n                  </FormControl>\n                  <FormMessage className={'!mt-0'}/>\n                </FormItem>\n              )}\n            />\n          </div>\n          <Tabs defaultValue={'params'} className={'flex flex-col space-y-1'}>\n            <TabsList className={''}>\n              <TabsTrigger value='params' className={'flex-1'}>Params</TabsTrigger>\n              <TabsTrigger value='headers' className={'flex-1'}>Headers</TabsTrigger>\n              <TabsTrigger value='body' className={'flex-1'}>Body</TabsTrigger>\n            </TabsList>\n            <TabsContent value='params' className='space-y-4'>\n              <Params control={control} register={register}/>\n            </TabsContent>\n            <TabsContent value='headers' className='space-y-4'>\n              <Headers control={control} register={register}/>\n            </TabsContent>\n            <TabsContent value='body' className='space-y-4'>\n              <FormField\n                control={control}\n                name=\"body\"\n                render={({field}) => (\n                  <FormItem className={`flex-1 w-full`}>\n                    {/*<FormLabel>Email</FormLabel>*/}\n                    <FormControl>\n                      <Body value={field.value} theme={props.theme} onChange={(val) => field.onChange(val)}/>\n                    </FormControl>\n                    <FormMessage className={'!mt-0'}/>\n                  </FormItem>\n                )}\n              />\n            </TabsContent>\n          </Tabs>\n          <Button disabled={loading}>\n            Send\n          </Button>\n        </form>\n      </Form>\n      <ResponseData data={resp} theme={props.theme}/>\n    </div>\n  )\n}\n\nexport {MakeApi}"],"names":["formSchema","z","MakeApi","props","resp","setResp","useState","loading","setLoading","control","register","form","useForm","zodResolver","defaultHeader","onSubmit","data","axios","rlt","val","useEffect","React","Form","FormField","field","FormItem","FormControl","Select","SelectTrigger","SelectValue","SelectContent","ListHeaderCommon","e","SelectItem","FormMessage","Input","Tabs","TabsList","TabsTrigger","TabsContent","Params","Headers","Body","Button","ResponseData"],"mappings":"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"}